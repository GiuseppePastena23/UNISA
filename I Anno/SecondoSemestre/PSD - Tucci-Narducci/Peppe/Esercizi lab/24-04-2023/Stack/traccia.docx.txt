Esercizio 7 – Stack


Dopo aver implementato le funzioni di libreria di un tipo di dato stack 
* newStack() → s
   * Post: s = nil
* emptyStack(s) → b
   * Post: se s=nil allora b = true altrimenti b = false
* push(e, s) → s’
   * Post: s = <a1, a2, … an> AND s’ = <e, a1, a2, …, an>
* pop(s) → s’
   * Pre: s = <a1, a2, …, an>   n>0
   * Post: s’ = <a2, …, an> 
* top(s) → e
   * Pre: s = <a1, a2, …, an>   n>0
   * Post: e = a1
realizzare le seguenti funzioni:
1. Creazione stack di interi: Riempire uno stack con dati interi positivi presi da tastiera. L’inserimento nello stack termina quando viene digitato -1 (si ricorda che se l’implementazione scelta prevedesse una dimensione massima dello stack, i controlli da fare durante l’inserimento sarebbero due)


2. Inversione: Creare una copia dello stack i cui elementi risultano invertiti.
   * Es. se lo stack S è  top->[ 4, 8, 2, 3, 1]  il nuovo stack S’ sarà top->[1, 3, 2, 8, 4]
   * Ciò suggerisce che uno stack può essere una pratica soluzione all’inversione di una stringa.
Nota: entrambi gli stack devono continuare ad esistere dopo il processo di copia!


   3. Merge: Con i due stack appena prodotti, si realizzi un terzo stack per mezzo di una funzione void append(stack1, stack2) i cui elementi sono ottenuti come combinazione dei due stack secondo l’ordine con il quale vengono passati in input alla funzione. 
   * Es. i due stack sono 
   * S ( top->[ 4, 8, 2, 3, 1]) 
   * S’ ( top->[1, 3, 2, 8, 4] ) 
   * merge(S, S’) -> S tale che (top-> [ 4, 8, 2, 3, 1, 1, 3, 2, 8, 4])


PS. Si potrebbero implementare due versioni alternative, una come quella descritta che fa la fusione dei due stack e una seconda che fa l’append di uno stack sull’altro: append(stack1, stack2) vale a dire che il contenuto di stack2 viene copiato in stack1. Non c’è creazione di un terzo stack.


   4. Estrazione: lo stack non consente di estrarre un elemento che si trova al di sotto del top. Con il nostro stack S’’ di numeri prodotto all’esercizio precedente immaginiamo di voler cancellare tutti gli elementi corrispondenti ad un N dato in input. La funzione NON deve creare un secondo stack S’’’ con gli elementi di S’’ escluso quelli corrispondenti ad N bensì restituire S’’ con gli elementi rimossi.
