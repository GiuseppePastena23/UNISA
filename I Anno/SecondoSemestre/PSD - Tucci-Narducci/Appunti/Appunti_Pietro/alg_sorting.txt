ALGORITMI DI SORTING

Il selection sort effettua una visita totale dell'array in cui, per ogni posizione visitata,
individua l'elemento che dovrebbe occupare quella posizione e lo scambia con l'elemento che occupa
attualmente quella posizione. In generale, dato un i compreso tra 0 ed n, tutti gli elementi
che precedono i sono in ordine, mentre l'elemento che dovrà occupare la posizione i sarà il
minimo tra quelli compresi nelle posizioni i ed n - 1.
Caso migliore: Omega(n^2)	Caso peggiore: O(n^2)

L'insertion sort effettua una visita totale dell'array in cui, si inserisce l'elemento corrente
nella posizione che garantisce il mantenimento dell'ordinamento e gli elementi precedenti maggiori
vengono spostati in avanti.
Caso migliore: Omega(n)		Caso peggiore: O(n^2)

Il bubble sort esegue al più n - 1 iterazioni, con n = numero elementi, in cui effettua una
visita durante la quale si scambiano gli elementi adiacenti che non risultano ordinati;
il tutto termina quando in un ciclo non avvengono scambi.
Caso migliore: Omega(n)		Caso peggiore: O(n^2)

Il mergesort è stato inventato da Von Neumann nel 1945 che consiste nel dividere il vettore in parti,
ordinarle e fonderle assieme; nel fare ciò richiede spazio ausiliario.
Il suo codice è ricorsivo: il vettore viene diviso in sottovettore destro e sinistro
e le divisioni finiscono quando l'estremo inferiore coincide o supera l'estremo superiore
Notare che la divisione è solo logica.
Caso migliore: Omega(n * log n)		Caso peggiore: O(n * log n)

Un altro esempio di uso dello heap diverso dalle code a priorità è lo heap sort:
complessità n * log2 n (come merge sort)
Viene allocata una coda a priorità e vi si inseriscono tutte le chiavi presenti nell'array e,
vista l'implementazione, queste saranno disposte in ordine.
Si esegue un altro ciclo a partire dalla fine dell'array iniziale e si inserisce di volta
in volta il massimo presente nella coda, in modo da ordinare l'array in maniera crescente.
Caso migliore: Omega(n * log n)		Caso peggiore: O(n * log n)